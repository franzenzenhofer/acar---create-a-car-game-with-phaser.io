// Generated by CoffeeScript 1.8.0
(function() {
  var addJump, create, d, drawCar, drawWithMouse, gd, init, makeCar, makeLevel, preDrawACar, preload, rand, render, update, _DEBUG_, _car_, _default_speed_, _game_, _game_debug_, _graphics_, _h_, _jump_counter_, _level_, _nav_, _pos_back_wheel_, _pos_car_body_, _pos_front_wheel_, _speed_, _sprite_collector_, _w_;

  _DEBUG_ = true;

  _game_ = {};

  _nav_ = {};

  _graphics_ = {};

  _car_ = {};

  _w_ = 0;

  _h_ = 0;

  _level_ = {};

  _sprite_collector_ = {};

  _speed_ = _default_speed_ = 30;

  _game_debug_ = false;

  gd = function() {
    if (_game_debug_ === true) {
      return true;
    }
    return false;
  };

  d = function(m) {
    if (_DEBUG_) {
      return console.log(m);
    }
  };

  rand = function(min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 255;
    }
    return Math.floor(Math.random() * (max - min)) + min;
  };

  _pos_car_body_ = [];

  _pos_back_wheel_ = [];

  _pos_front_wheel_ = [];

  preDrawACar = function(canvas) {
    var ctx, drawWheel;
    ctx = canvas.getContext("2d");
    ctx.strokeStyle = '#D3D3D3';
    ctx.fillStyle = '#FFFFFF';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(50, 200);
    ctx.lineTo(200, 200);
    ctx.lineTo(200, 70);
    ctx.lineTo(400, 70);
    ctx.lineTo(400, 200);
    ctx.lineTo(550, 200);
    ctx.lineTo(550, 350);
    ctx.lineTo(550, 350);
    ctx.lineTo(525, 350);
    ctx.arc(440, 350, 80, 0 * Math.PI, 1 * Math.PI, true);
    ctx.lineTo(240, 350);
    ctx.arc(160, 350, 80, 0 * Math.PI, 1 * Math.PI, true);
    ctx.lineTo(50, 350);
    ctx.closePath();
    ctx.stroke();
    ctx.beginPath();
    ctx.rect(25, 25, 550, 400);
    _pos_car_body_ = [25, 25, 550, 400];
    ctx.setLineDash([2, 3]);
    ctx.stroke();
    ctx.closePath();
    drawWheel = function(x, y, r) {
      var dist, h2, w2, x2, y2;
      ctx.beginPath();
      ctx.arc(x, y, r, 0 * Math.PI, 2 * Math.PI, true);
      ctx.stroke();
      ctx.closePath();
      ctx.beginPath();
      ctx.setLineDash([2, 3]);
      dist = 20;
      ctx.rect(x2 = x - (r + dist), y2 = y - (r + dist), w2 = (r + dist) * 2, h2 = (r + dist) * 2);
      ctx.stroke();
      return [x2, y2, w2, h2];
    };
    _pos_back_wheel_ = drawWheel(750, 220, 140);
    d(_pos_back_wheel_);
    _pos_front_wheel_ = drawWheel(1100, 220, 140);
    return d(_pos_front_wheel_);
  };

  drawWithMouse = function(canvas) {
    var clicked, ctx, move, start, stop;
    ctx = canvas.getContext("2d");
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 25;
    clicked = 0;
    start = function(e) {
      var x, y;
      clicked = 1;
      ctx.beginPath();
      x = e.pageX;
      y = e.pageY;
      return ctx.moveTo(x, y);
    };
    move = function(e) {
      var x, y;
      if (clicked) {
        x = e.pageX;
        y = e.pageY;
        ctx.lineTo(x, y);
        return ctx.stroke();
      }
    };
    stop = function(e) {
      return clicked = 0;
    };
    canvas.addEventListener("mousedown", start, false);
    canvas.addEventListener("mousemove", move, false);
    return canvas.addEventListener("mouseup", stop, false);
  };

  drawCar = function(cb) {
    var blueprint_canvas, button, draw_canvas;
    blueprint_canvas = document.createElement('canvas');
    draw_canvas = document.createElement('canvas');
    draw_canvas.width = blueprint_canvas.width = _w_;
    draw_canvas.height = blueprint_canvas.height = _h_;
    draw_canvas.id = "draw_canvas";
    blueprint_canvas.id = "blueprint_canvas";
    preDrawACar(blueprint_canvas);
    drawWithMouse(draw_canvas);
    blueprint_canvas.setAttribute('style', 'position:absolute;top:0px;left:0px;z-index: +1;');
    draw_canvas.setAttribute('style', 'position:absolute;top:0px;left:0px;z-index: +2;');
    window.document.body.appendChild(blueprint_canvas);
    window.document.body.appendChild(draw_canvas);
    button = document.createElement('button');
    button.innerHTML = 'Draw a car and two wheels and then click this button!';
    button.setAttribute('style', 'position: absolute; top: 5; left: 10;z-index: +3;');
    window.document.body.appendChild(button);
    return button.addEventListener('click', function() {
      var cutAndSet;
      draw_canvas.setAttribute('style', 'display:none;');
      blueprint_canvas.setAttribute('style', 'display:none;');
      button.setAttribute('style', 'display:none;');
      cutAndSet = function(resize_factor, pos_array, set_target) {
        var c2, c2ctx, h, w, x, y;
        x = pos_array[0], y = pos_array[1], w = pos_array[2], h = pos_array[3];
        c2 = document.createElement('canvas');
        c2.width = w / resize_factor;
        c2.heigth = h / resize_factor;
        c2ctx = c2.getContext("2d");
        c2ctx.drawImage(draw_canvas, x, y, w, h, 0, 0, c2.width, c2.heigth);
        _sprite_collector_[set_target] = new Image();
        _sprite_collector_[set_target].width = c2.width;
        _sprite_collector_[set_target].height = c2.heigth;
        return _sprite_collector_[set_target].src = c2.toDataURL();
      };
      cutAndSet(5, _pos_car_body_, "car_body");
      cutAndSet(8, _pos_front_wheel_, "front_wheel");
      cutAndSet(8, _pos_back_wheel_, "back_wheel");
      return cb();
    });
  };

  init = function() {
    d('init');
    _w_ = window.innerWidth;
    _h_ = window.innerHeight;
    return drawCar(function() {
      return _game_ = new Phaser.Game(_w_, _h_, Phaser.AUTO, '', {
        preload: preload,
        create: create,
        update: update,
        render: render
      });
    });
  };

  preload = function() {
    d('preload');
    _game_.cache.addImage('car-body', _sprite_collector_.car_body.src, _sprite_collector_.car_body);
    _game_.cache.addImage('back-wheel', _sprite_collector_.back_wheel.src, _sprite_collector_.back_wheel);
    return _game_.cache.addImage('front-wheel', _sprite_collector_.front_wheel.src, _sprite_collector_.front_wheel);
  };

  create = function() {
    var style, t, text;
    d('create');
    _graphics_ = _game_.add.graphics(0, 0);
    _game_.world.setBounds(0, 0, _w_ * 1000, _h_);
    _game_.physics.startSystem(Phaser.Physics.P2JS);
    _game_.physics.p2.gravity.y = 300;
    _game_.physics.p2.restitution = 0.4;
    _game_.stage.backgroundColor = '#ffffff';
    _game_.physics.p2.friction = 5;
    text = "←/→ = left/right | ↑/↓ = wheelie/anit-wheelie | t = turob ";
    style = {
      font: "65px Arial",
      fill: "#000000",
      align: "center"
    };
    t = _game_.add.text(game.world.centerX - 300, 0, text, style);
    _nav_ = _game_.input.keyboard.createCursorKeys();
    _nav_.d = _game_.input.keyboard.addKey(Phaser.Keyboard.D);
    _nav_.t = _game_.input.keyboard.addKey(Phaser.Keyboard.T);
    _car_ = makeCar(_game_, _nav_);
    _level_ = makeLevel(_game_, _nav_, _car_);
    return _game_.camera.follow(_car_.main);
  };

  update = function() {
    if (_nav_.right.isDown) {
      d('->');
      _car_.back_wheel.body.angularVelocity = _speed_;
      _car_.front_wheel.body.angularVelocity = _speed_;
    }
    if (_nav_.left.isDown) {
      d('<-');
      _car_.back_wheel.body.angularVelocity = _speed_ * -1;
      _car_.front_wheel.body.angularVelocity = _speed_ * -1;
    }
    if (_nav_.up.isDown) {
      d('^');
      _car_.main.body.angle = _car_.main.body.angle - 1;
      _car_.main.body.angularVelocity = 0.0001;
    }
    if (_nav_.down.isDown) {
      d('v');
      _car_.main.body.angle = _car_.main.body.angle + 1;
      _car_.main.body.angularVelocity = 0.0001;
    }
    if (_nav_.d.isDown) {
      d('game debug');
      _game_debug_ = !gd();
      _car_.main.body.debug = gd();
      _car_.front_wheel.body.debug = gd();
      _car_.back_wheel.body.debug = gd();
    }
    if (_nav_.t.isDown) {
      return _speed_ = _default_speed_ * 2.8;
    } else {
      return _speed_ = _default_speed_;
    }
  };

  makeCar = function(g, n) {
    var back_constraint, back_spring, back_wheel, car_main, cg_car, front_constraint, front_spring, front_wheel;
    car_main = g.add.sprite(100, 100, 'car-body');
    front_wheel = g.add.sprite(140, 130, 'front-wheel');
    back_wheel = g.add.sprite(60, 130, 'back-wheel');
    cg_car = g.physics.p2.createCollisionGroup();
    g.physics.p2.updateBoundsCollisionGroup();
    g.physics.p2.enable([front_wheel, back_wheel, car_main]);
    car_main.body.setRectangle(105, 75);
    car_main.body.debug = gd();
    car_main.body.mass = 1;
    car_main.body.setCollisionGroup(cg_car);
    front_wheel.body.setCircle(20);
    front_wheel.body.debug = gd();
    front_wheel.body.mass = 1;
    front_wheel.body.setCollisionGroup(cg_car);
    back_wheel.body.setCircle(20);
    back_wheel.body.debug = gd();
    back_wheel.body.mass = 1;
    back_wheel.body.setCollisionGroup(cg_car);
    front_spring = g.physics.p2.createSpring(car_main, front_wheel, 70, 150, 50, null, null, [30, 0], null);
    back_spring = g.physics.p2.createSpring(car_main, back_wheel, 70, 150, 50, null, null, [-30, 0], null);
    front_constraint = g.physics.p2.createPrismaticConstraint(car_main, front_wheel, false, [30, 0], [0, 0], [0, 1]);
    front_constraint.lowerLimitEnabled = front_constraint.upperLimitEnabled = true;
    front_constraint.upperLimit = -1;
    front_constraint.lowerLimit = -8;
    back_constraint = g.physics.p2.createPrismaticConstraint(car_main, back_wheel, false, [-30, 0], [0, 0], [0, 1]);
    back_constraint.lowerLimitEnabled = back_constraint.upperLimitEnabled = true;
    back_constraint.upperLimit = -1;
    back_constraint.lowerLimit = -8;
    return {
      main: car_main,
      front_wheel: front_wheel,
      back_wheel: back_wheel,
      front_spring: front_spring,
      back_spring: back_spring,
      cg_car: cg_car
    };
  };

  makeLevel = function(g, n, c) {
    var ground, i, jumps, _i;
    ground = g.add.group();
    jumps = [];
    for (i = _i = 0; _i < 29; i = ++_i) {
      jumps.push(addJump(ground, (600 * (i + 1)) + rand(0, 800), _h_, rand(50, _w_ * 0.5), rand(10, _h_ * 0.6), g, n, c));
    }
    return {
      ground: ground,
      jumps: jumps
    };
  };

  _jump_counter_ = 0;

  addJump = function(ground, x, y, width, height, g, n, c, counter) {
    var cg_level, jump, jump_polygon;
    if (x == null) {
      x = 500;
    }
    if (y == null) {
      y = _h_;
    }
    if (width == null) {
      width = 700;
    }
    if (height == null) {
      height = 50;
    }
    if (g == null) {
      g = _game_;
    }
    if (n == null) {
      n = _nav_;
    }
    if (c == null) {
      c = _car_;
    }
    if (counter == null) {
      counter = _jump_counter_++;
    }
    _graphics_.beginFill(0xffffff);
    _graphics_.lineStyle(5, 0x000000, 1);
    jump_polygon = [[x, y], [x + width, y - height], [x + (width * 2), y]];
    _graphics_.moveTo(x, y);
    _graphics_.lineTo(x + width, y - height);
    _graphics_.lineTo(x + (width * 2), y);
    _graphics_.endFill();
    cg_level = g.physics.p2.createCollisionGroup();
    g.physics.p2.updateBoundsCollisionGroup();
    jump = ground.create(0, 0);
    jump.anchor.setTo(0.5, 0.5);
    g.physics.p2.enable(jump, true, true);
    jump.body.mass = 10;
    jump.body.debug = gd();
    jump.body.addPolygon({}, jump_polygon);
    jump.body.kinematic = true;
    jump.body.setCollisionGroup(cg_level);
    jump.body.fixedRotation = true;
    jump.body.data.gravityScale = 0;
    jump.body.collides(c.cg_car);
    jump.body.collideWorldBounds = false;
    c.front_wheel.body.collides(cg_level);
    c.back_wheel.body.collides(cg_level);
    c.main.body.collides(cg_level);
    return jump;
  };

  render = function() {
    if (gd()) {
      return _game_.debug.cameraInfo(_game_.camera, 32, 32, '#000000');
    } else {
      return _game_.debug.cameraInfo(_game_.camera, -300, -300, '#000000');
    }
  };

  window.document.onload = init();

}).call(this);
